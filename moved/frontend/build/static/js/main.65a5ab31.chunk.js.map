{"version":3,"sources":["components/header.js","components/addbar.js","components/todolist.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","React","Component","AddBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","bkend_url_base","addItem","event","key","fetch","concat","target","value","then","window","location","reload","hostname","type","placeholder","onKeyDown","Todolist","state","items","bkend_host_port","id","setState","filter","item","toConsumableArray","find","done","_this2","onClick","removeItem","toggleDone","isDone","_this3","res","json","_this4","map","createItem","App","header","addbar","todolist","Boolean","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.65a5ab31.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./styles/Header.css\";\r\n\r\nclass Header extends React.Component {\r\n  render() {\r\n    return <div className=\"Header\"> TODO List </div>;\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./styles/Addbar.css\";\r\n\r\nclass AddBar extends React.Component {\r\n  bkend_url_base = null\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    if(window.location.hostname == \"localhost\"){\r\n      this.bkend_url_base = \"http://localhost:8080\";\r\n    }else{\r\n      this.bkend_url_base = \"https://\" + window.location.hostname;\r\n    }\r\n\r\n    //this.props = props;\r\n  }\r\n\r\n  //props = null;\r\n\r\n  addItem = event => {\r\n    if (event.key === \"Enter\") {\r\n      fetch(this.bkend_url_base + `/item/create/${event.target.value}`).then(\r\n        //alert(\"Bug: Reload The Page To View Changes\")\r\n        //this.props.emitVal(Math.random())\r\n        window.location.reload()\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"AddBar\">\r\n        <input\r\n          className=\"AddBar-Text\"\r\n          type=\"text\"\r\n          placeholder=\"Enter TODO Item\"\r\n          onKeyDown={this.addItem}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddBar;\r\n","import React from \"react\";\r\nimport \"./styles/Todolist.css\";\r\n\r\nclass Todolist extends React.Component {\r\n  bkend_url_base = null\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      //randToReload: props.val\r\n    };\r\n\r\n    if(window.location.hostname == \"localhost\"){\r\n      this.bkend_url_base = \"http://localhost:8080\";\r\n    }else{\r\n      this.bkend_host_port = \"https://\" + window.location.hostname;\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  removeItem(id) {\r\n    fetch(this.bkend_url_base + `/item/delete/${id}`).then(\r\n      this.setState({\r\n        items: this.state.items.filter(item => item.id !== id),\r\n      })\r\n    );\r\n  }\r\n\r\n  toggleDone(id) {\r\n    let items = [...this.state.items];\r\n    let item = items.find(item => item.id === id);\r\n    item.done = !item.done;\r\n\r\n    fetch(this.bkend_url_base + `/item/update/${id}/${item.done}`).then(\r\n      this.setState({ items })\r\n    );\r\n  }\r\n\r\n  isDone(done) {\r\n    if (done) {\r\n      return \"Done\";\r\n    } else {\r\n      return \"Not Done\";\r\n    }\r\n  }\r\n\r\n  createItem(item) {\r\n    return (\r\n      <div className=\"ListItem\" key={item.id} id={item.id}>\r\n        <div className=\"Title\">\r\n          <div className=\"RemoveItem\" onClick={() => this.removeItem(item.id)}>\r\n            X\r\n          </div>\r\n          {item.item}\r\n        </div>\r\n        <div className=\"Status\" onClick={() => this.toggleDone(item.id)}>\r\n          {this.isDone(item.done)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(this.bkend_url_base + \"/items\")\r\n      .then(res => res.json())\r\n      .then(json => this.setState({ items: json.items }));\r\n  }\r\n\r\n  render() {\r\n    var items = this.state.items;\r\n    return (\r\n      <div className=\"TodoList\">\r\n        <div className=\"List\">{items.map(item => this.createItem(item))}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todolist;\r\n","import React from \"react\";\r\n\r\nimport Header from \"./components/header\";\r\nimport AddBar from \"./components/addbar\";\r\nimport TodoList from \"./components/todolist\";\r\n\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {  \r\n\r\n  render() {\r\n    //const [val, setVal] = React.useState();\r\n\r\n    // return (\r\n    //   <div className=\"App\">\r\n    //     <Header />\r\n    //     <AddBar emitVal={setVal} />\r\n    //     <TodoList val={val} />\r\n    //   </div>\r\n    // );\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <AddBar />\r\n        <TodoList />\r\n      </div>\r\n    );    \r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}